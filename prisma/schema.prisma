generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  client
  analyst
  admin
}

enum CaseStatus {
  intake
  in_progress
  monitoring
  closed
}

enum TargetType {
  social
  broker
  forum
  blog
  engine
}

enum RequestKind {
  GDPR_ERASURE
  CCPA_DELETE
  DEINDEX
}

enum RequestStatus {
  draft
  sent
  ack
  done
  rejected
}

enum SentVia {
  EMAIL
  PDF_ONLY
}

enum Severity {
  low
  med
  high
}

enum TaskType {
  scan
  dsar_send
  followup
}

enum TaskStatus {
  queued
  running
  done
  error
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  role          Role           @default(client)
  createdAt     DateTime       @default(now())

}

model ClientProfile {
  userId       String   @id
  aliases      String[] @default([])
  city         String?
  consentFlags Json
  kycStatus    KycStatus @default(UNVERIFIED)
  idDocs       Json[]    @default([])
  user         User     @relation(fields: [userId], references: [id])
}

enum KycStatus {
  UNVERIFIED
  PENDING
  VERIFIED
}

model Case {
  id           String        @id @default(uuid())
  userId       String
  status       CaseStatus    @default(intake)
  progress     Int           @default(0)
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  targets      Target[]
  requests     Request[]
  scanFindings ScanFinding[]
  tasks        Task[]
  auditLogs    AuditLog[]
  invoices     Invoice[]
}

model Target {
  id       String   @id @default(uuid())
  caseId   String
  domain   String
  type     TargetType
  notes    String?

  requests Request[]
}

model Request {
  id       String        @id @default(uuid())
  caseId   String
  targetId String?
  kind     RequestKind
  status   RequestStatus @default(draft)
  payload  Json
  sentAt   DateTime?
  legalBasis    String?
  dueAt         DateTime?
  recipientEmail String?
  recipientName  String?
  attachments    Json[]    @default([])
  sentVia        SentVia?
  pdfPath        String?
  case     Case          @relation(fields: [caseId], references: [id])
  target   Target?       @relation(fields: [targetId], references: [id])
}

model ScanFinding {
  id          String   @id @default(uuid())
  caseId      String
  url         String
  domain      String
  title       String?
  snippet     String?
  severity    Severity
  firstSeenAt DateTime
  lastSeenAt  DateTime
  case        Case     @relation(fields: [caseId], references: [id])
}

model Task {

}

enum AuditAction {
  REQUEST_CREATE
  REQUEST_SEND
  REQUEST_FAIL
}

model AuditLog {
  id          String      @id @default(uuid())
  actorUserId String?
  caseId      String?
  action      AuditAction
  details     Json
  createdAt   DateTime    @default(now())
  actor       User?       @relation("AuditLogsActor", fields: [actorUserId], references: [id])
  case        Case?       @relation(fields: [caseId], references: [id])
}

model Invoice {
  id        String   @id @default(uuid())
  caseId    String?
  case      Case?    @relation(fields: [caseId], references: [id])
  createdAt DateTime @default(now())
}
